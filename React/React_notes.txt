---------------- React Notes ---------------


React is a Java Script Library for building UI ---


# How to install Reactjs ---

	Fist of all me need to install node for the same 
	As we done installing node in JS tutorials so it is same.

	On Terminal of Linux ---

	$ sudo npm i create-react-app

	Now move to that location where you want to create a app by terminal.

	$ npx create-react-app my-react-app
	$ cd my-react-app
	$ npm start



# Create a js of Hello World file in SRC folder of my app ---

	#File Name is Demo.js ---

		import React, {Component} from 'react'
		import reactDom from 'react-dom'

		class Demo extends Component{
		    render(){
		        return <div>
		                <h1>Hello World</h1>
		                <p>Welcome on Preet's Page</p>
		                </div>
		    }
		}
		export default Demo;

	# In index.js file need to add some line like --

		import Demo from './Demo'
		
		ReactDOM.render(  <React.StrictMode>    <Demo />  </React.StrictMode>,  document.getElementById('root'));




# Let Add CSS file and Props property ---

	# In Demo.css
		.maindiv_style{
		    background: #F9BD92;
		}	

	# In Demo.js
		import React, {Component} from 'react';
		import reactDom from 'react-dom';
		import './Demo.css';

		const Demo = (props) => {
		    return <div className = "maindiv_style">
		                <h1>Hello {props.name}</h1>
		                <p>Welcome on Preet's Page</p>
		                </div>
		}
		export default Demo;

	# In Index.js File --
		import Demo from './Demo'		
		ReactDOM.render(  <React.StrictMode>    <Demo name = "Preet Bhadana"/>  </React.StrictMode>,  document.getElementById('root'));




=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Date  -- 30-July-2021
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



# Lifecycle of React ---

	Lifecycle of react is consists three phases --

	1) Mounting. 
	2) Updating.
	3) Unmounting.

# Mounting --- Mounting means as puting elements into DOM, First Phase of react which consists -- All Builtin methods like --

	constructor()
	getDerivedStateFromProps()
	render()
	componentDidMount()


1) constructor
	The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.

	

2) getDerivedStateFromProps
	The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.

	
3) render
	The render() method is required, and is the method that actually outputs the HTML to the DOM.


4) componentDidMount
	The componentDidMount() method is called after the component is rendered.


	Eg --
		import React from 'react';

		class Header extends React.Component {
		    constructor(props) {
		      super(props);
		      this.state = {favoritecolor: "red"};
		    }
		    componentDidMount() {
		      setTimeout(() => {
		        this.setState({favoritecolor: "yellow"})
		      }, 1000)
		    }
		    render() {
		      return (
		        <h1>My Favorite Color is {this.state.favoritecolor}</h1>
		      );
		    }
		  }
		export default Header;


# Update --- The second phase of lifecycle.
	
	A component is updated whenever there is a change in the component's state or props.

Following have some methods use in update phase --


1) getDerivedStateFromProps
	Also at updates the getDerivedStateFromProps method is called. 
	This is the first method that is called when a component gets updated.

	Eg --
		class Header extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {favoritecolor: "red"};
		  }
		  static getDerivedStateFromProps(props, state) {
		    return {favoritecolor: props.favcol };
		  }
		  changeColor = () => {
		    this.setState({favoritecolor: "blue"});
 		 }
		  render() {
		    return (
		      <div>
		      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
		      <button type="button" onClick={this.changeColor}>Change color</button>
		      </div>
		    );
		  }
		}

		ReactDOM.render(<Header favcol="yellow"/>, document.getElementById('root'));


2) shouldComponentUpdate
	In the shouldComponentUpdate() method you can return a Boolean value that specifies whether 
	React should continue with the rendering or not.

	The default value is true.

	Eg --
		class Header extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {favoritecolor: "red"};
		  }
		  shouldComponentUpdate() {
		    return false;
		  }
		  changeColor = () => {
		    this.setState({favoritecolor: "blue"});
		  }
		  render() {
		    return (
		      <div>
		      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
		      <button type="button" onClick={this.changeColor}>Change color</button>
		      </div>
		    );
		  }
		}

		ReactDOM.render(<Header />, document.getElementById('root'));


3) render
	The render() method is of course called when a component gets updated, 
	it has to re-render the HTML to the DOM, with the new changes.

	Eg --
		class Header extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {favoritecolor: "red"};
		  }
		  changeColor = () => {
		    this.setState({favoritecolor: "blue"});
		  }
		  render() {
		    return (
		      <div>
		      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
		      <button type="button" onClick={this.changeColor}>Change color</button>
		      </div>
		    );
		  }
		}

		ReactDOM.render(<Header />, document.getElementById('root'));

4) getSnapshotBeforeUpdate
	In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, 
	meaning that even after the update, you can check what the values were before the update.

	Eg --
		class Header extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {favoritecolor: "red"};
		  }
		  componentDidMount() {
		    setTimeout(() => {
		      this.setState({favoritecolor: "yellow"})
		    }, 1000)
		  }
		  getSnapshotBeforeUpdate(prevProps, prevState) {
		    document.getElementById("div1").innerHTML =
		    "Before the update, the favorite was " + prevState.favoritecolor;
		  }
		  componentDidUpdate() {
		    document.getElementById("div2").innerHTML =
		    "The updated favorite is " + this.state.favoritecolor;
		  }
		  render() {
		    return (
		      <div>
		        <h1>My Favorite Color is {this.state.favoritecolor}</h1>
		        <div id="div1"></div>
		        <div id="div2"></div>
		      </div>
		    );
		  }
		}

		ReactDOM.render(<Header />, document.getElementById('root'));


5) componentDidUpdate
	The componentDidUpdate method is called after the component is updated in the DOM.

	Eg --
		class Header extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {favoritecolor: "red"};
		  }
		  componentDidMount() {
		    setTimeout(() => {
		      this.setState({favoritecolor: "yellow"})
		    }, 1000)
		  }
		  componentDidUpdate() {
		    document.getElementById("mydiv").innerHTML =
		    "The updated favorite is " + this.state.favoritecolor;
		  }
		  render() {
		    return (
		      <div>
		      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
		      <div id="mydiv"></div>
		      </div>
		    );
		  }
		}

		ReactDOM.render(<Header />, document.getElementById('root'));


# Unmounting
	The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.

	This phase have one builtin method only --

1) componentWillUnmount
	The componentWillUnmount method is called when the component is about to be removed from the DOM.
		
	Eg --
		class Container extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {show: true};
		  }
		  delHeader = () => {
		    this.setState({show: false});
		  }
		  render() {
		    let myheader;
		    if (this.state.show) {
		      myheader = <Child />;
		    };
		    return (
		      <div>
		      {myheader}
		      <button type="button" onClick={this.delHeader}>Delete Header</button>
		      </div>
		    );
		  }
		}

		class Child extends React.Component {
		  componentWillUnmount() {
		    alert("The component named Header is about to be unmounted.");
		  }
		  render() {
		    return (
		      <h1>Hello World!</h1>
		    );
		  }
		}

		ReactDOM.render(<Container />, document.getElementById('root'));















