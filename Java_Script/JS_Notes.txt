
--------------- Java Script -------------


JS stands for Java Script ---

Run on Browser directly or can use node for same.

Node is C++ program include JS work as JS engine


# Steps to run and practice JS ---

	On Browser (any browser like google chrome etc)
	
		||
		
	Inspect Mode (Either by right click or ctrl + shift + c)

		||
		
	Then open console tab at inspect mode.
		
		||

	Then we can right any js for practice.




# First js program hello world ---
	
	console.log('Hello World');



# Add tow digits ---

	2 + 2	(It will show output directly)


# To show a alert pop on browser --

	alert('yo')  # yo can be any message




# Install Node for js --

	$ sudo apt-cache show nodejs
		(this command will show the systeme prefered version of js)

	$ sudo apt install nodejs
		(To install system preferd version)


	# If want to install latest verion without NVM ---
		means after these comands NVM will attometically installed


	$ sudo apt install curl
	
	$ curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -

	$sudo apt-get install -y nodejs


	# By NVM ---

	$ nvm list --remote (Show the list of all avilable versions at remote)

	$ nvm install v12.17.0 (to install other version it can be anyother one)
	
	$ nvm list (To list out the avilable virsion on machine)

	$ nvm use v14.3.0 (or system) (It will swap the versions)



# I am Following this video to start js --

https://youtu.be/W6NZfCO5SIk


# Fist Js program via Editors ---
	
	We have two ways to add js in htm file

	1) At head section
	2) At body section


# At body section ---

	<html>
	<head>
		<title> My page</title>
	</head>
	<body>
		<h1> Hello World</h1>
		<script> 
			console.log('Hello World');
			//Its my first js
		</script>
	</body>
	</html>
	
	
		
# Now Let make a seprate java script file and use in html script ---

# Create a js file with extension ".js"---

	console.log('Hello Wolrd');
	//First coment


	Similarly edit html file ---

	<html>
        <head>
                <title> My page</title>
        </head>
        <body>
                <h1> Hello World</h1>
                <script src = "index.js">
                </script>
        </body>
        </html>



# Run the same js file on terminal ----

	$ node index.js





# Variables in Js --

	 Variables can be declared by let keyword---

	Eg -- let name = "Preet";
		console.log(name);



# Constants in JS ---

	const interestRate = 0.3;
	console.log(interestRate)


# Data Types in JS ---


	Js have two types of datatype type ---
	
	1) Primitive types --

		1) String
		2) Number
		3) Boolean
		4) Undefined
		5) Null
	
	2) Reference Types --
		
		1) Object
		2) Array
		3) Functions


# Primitive Type ---

1) String --- 
	eg --
		let name = "Preet";

2) Number ---
	eg -- 	
		let age = 25;

3) Boolean ---
	eg -- 
		let isApproved = true;

4) Undefined ---
	eg --
		let firstName = undefined;

5) Null ---
	eg --
		let selectColor = null;


# TO check datatype ---

	eg -- typeof name



# References types ---

1) Object ---
	eg --
		let person = {
			name: "Preet"
			age: 25
		};
		console.log(person);


# To change value of key name ---

	We have two notations --
	
	1) Dot Notations --
		eg --
			person.name = 'John'
	
	2) Bracket Notations --
		eg --
			person['name'] = 'Mary'


2) Array----
	eg --
		let selectColors = ['red', 'blue'];
		console.log(selectColors);

		selectcolors[2] ='green'
		console.log(selectColors[2])



3) Functions ---

	eg -- 
		function greet(){
			console.log("Hello World")
		}
		greet();


	# Parametrized Function --
	
	eg -- 1
		fucntion greet(name){
			console.log('Hello'+name);
		}
		greet('John');


	eg -- 2
		fucntion greet(name, lastName){
			console.log('Hello'+name+' '+lastName);
		}
		greet('John', 'Smith')

# Return from function ---
	fucntion square(number){
		return number * number;
	}
	let sol = square(2);
	console.log(sol)

		OR
	
	console.log(square(2))




# Js Variable Scopes --
	It is two scopes --

	1) Global Variables -- A global variable has global scope which means it can be defined anywhere in your JavaScript code

	2) Local Variables -- A local variable will be visible only within a function where it is defined. Function parameters 
				are always local to that function.


# Operators in Js ---

	1) Arithmetic Operators --
		(+, -, *, /, %, ++, --)

	2) Comparision Operators --
		(==, !=, >, <, >=, <=)

	3) Logical Operators --
		&& -- Logical AND
		|| -- Logical OR
		!  -- Logical NOT

	4) Bitwise Operators --
		&   -- Bitwise AND
		|   -- Bitwise OR
		^   -- Bitwise XOR
		~   -- Bitwise NOT
		<<  -- Bitwise Left shift
		>>  -- Bitwise Right shift
		>>> -- Bitwise Right shift with zero

	5) Assignment Operators --
		(=, +=, -=, *=, /=, %=)

	6) Miscellaneous Operators or ternary Operator --
		? : -- if condition true ? then value X : otherwise Y
	
	7) Typeof Operator --
		it will return datatype of operands




# If-else Statements ---
	eg --
		<html>
		<head>
		    <title>If-Else test page</title>
		</head>
		<body>
		    <script type="text/javascript">
		        var age = 29;
		        if(age > 18){
		            document.write("<b>Qualifies for driving</b>")
		        }
		        else{
		            document.write("<b>Does not qualify for driving</b>")
		        }
		    </script>
		</body>
		</html>



# If-Else-If Statements ---
	It is also called nested if-else --

	eg --
		<html>
		<head>
		    <title>If-Else-If test page</title>
		</head>
		<body>
		    <script type="text/javascript">
		        var book = 'maths';
		        if(book == 'maths')
		        {
		            document.write("<b>Maths Book</b>")
		        }
		        else if(book == 'history')
		        {
		            document.write("<b>History Book</b>")
		        }
		        else if(book == 'economics')
		        {
		            document.write("<b>Economics Book</b>")
		        }
		        else{
		            document.write("<b>Unknown Book</b>")
		        }
		    </script> 
		</body>
		</html>




# Syntax For JS -- 
	the <script> tags, containing your JavaScript, anywhere within your web page, but it is normally recommended that you should keep it within the <head> tags.

	Syntax -- <script ...>
		   JavaScript code
		</script>
	
	Script take two important attributes --
	
	# Language --- This attribute specifies what scripting language you are using. 
			Typically, its value will be javascript. 
			Although recent versions of HTML (and XHTML, its successor) have phased out the use of this attribute.

	# Type --- This attribute is what is now recommended to indicate the scripting language in use and 
			its value should be set to "text/javascript".



# Switch Case Statements ---

	It is same as conditional statements as if else but just difference in syntax --

	Syntax ---
		switch (expression) {
		   case condition 1: statement(s)
		   break;
   
		   case condition 2: statement(s)
		   break;
			   ...
   
		   case condition n: statement(s)
		   break;
   
		   default: statement(s)
		}

	
# Loops in JS ---
	
# While Loop --
	Syntax --
		while (expression) {
		   Statement(s) to be executed if expression is true
		}
	
	Eg --
		<html>
		   <body>
      
		      <script type = "text/javascript">
		            var count = 0;
		            document.write("Starting Loop ");
         
		            while (count < 10) {
		               document.write("Current Count : " + count + "<br />");
		               count++;
		            }
         
		            document.write("Loop stopped!");
		         //-->
		      </script>
		   </body>
		</html>


# Do While Loop --- As same as while loop just differ as it will validate after the process --

	Syntax -- 
		do {
		   Statement(s) to be executed;
		} while (expression);
	
	Eg --
		<html>
		   <body>   
		      <script type = "text/javascript">
		            var count = 0;
            
		            document.write("Starting Loop" + "<br />");
		            do {
		               document.write("Current Count : " + count + "<br />");
		               count++;
		            }
            
		            while (count < 5);
		            document.write ("Loop stopped!");
		         //-->
		      </script>
		   </body>
		</html>



# For Loop ---

	Syntax --- for (initialization; test condition; iteration statement) {
			   Statement(s) to be executed if test condition is true
			}

	Eg --- 
		<html>
		   <body>      
		      <script type = "text/javascript">
		            var count;
		            document.write("Starting Loop" + "<br />");
         
		            for(count = 0; count < 10; count++) {
		               document.write("Current Count : " + count );
		               document.write("<br />");
		            }         
		            document.write("Loop stopped!");
		      </script>
		   </body>
		</html>


# Contructor ---
        Syntax ---
                <script type = "text/javascript">
                      var variablename = new Function(Arg1, Arg2..., "Function Body");
                </script>

        Eg --
		<html>
		   <head>
		      <script type = "text/javascript">
		            var func = new Function("x", "y", "return x*y;");
		            function secondFunction() {
		               var result;
		               result = func(10,20);
		               document.write ( result );
		            }
		      </script>
		   </head>
   
		   <body>
		      <p>Click the following button to call the function</p>
      
		      <form>
		         <input type = "button" onclick = "secondFunction()" value = "Call Function">
		      </form>
		   </body>
		</html>

		

# Inline Functions --
	Syntax --- 
		<script type = "text/javascript">
		      var variablename = function(Argument List) {
		         Function Body 
		      };
		</script>

	Eg -- 
		<html>
		   <head>
		      <script type = "text/javascript">
		            var func = function(x,y) { 
		               return x*y 
		            };
		            function secondFunction() {
		               var result;
		               result = func(10,20);
		               document.write ( result );
		            }
		      </script>
		   </head>
   
		   <body>
		      <p>Click the following button to call the function</p>
      
		      <form>
		         <input type = "button" onclick = "secondFunction()" value = "Call Function">
		      </form>
		   </body>
		</html>



		
# Array In Js ----

	Collection of hetrogenious datatypes ---

# Creation of array ---
	Eg --  BY Array class method --
 		var fruit = new Array("Apple", "Banana", "Mango");

	Eg -- By direct method --
		var fruit = ["Apple", "Banana", "Mango"];

# Searching in array --
	It can be done by --

	1) arr.indexof(item)
	2) arr.lastindexof(item)
	
	Eg --
		var fruits = ["Apple", "Banana", "Mango"]
		fruit.indexof("apple")
		fruit.lastindexof("2")

# Map method in array ---

	Syntax -- array.map(function(currentValue, index, arr), thisValue)

	Eg --
		const numbers = [4, 9, 16, 25];
		const newArr = numbers.map(Math.sqrt)

	eg --
		const numbers = [65, 44, 12, 4];
		const newArr = numbers.map(myFunction)

		function myFunction(num) {
		  return num * 10;
		}
	
	eg --
		const persons = [
		  {firstname : "Malcom", lastname: "Reynolds"},
		  {firstname : "Kaylee", lastname: "Frye"},
		  {firstname : "Jayne", lastname: "Cobb"}
		];

		persons.map(getFullName);

		function getFullName(item) {
		  return = [item.firstname,item.lastname].join(" ");
		}


# Pop Method in JS --
	It will delete last element of array --
	
	Eg -- 	const fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.pop();   // Returns "Mango"


# Push method i JS --
	It will add elements in array ---

	Eg -- const fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.push("Kiwi");

	eg -- const fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.push("Kiwi", "Lemon", "Pineapple");



# Find Method of array ---

	eg --
		<html>
		<head>
		    <title>Find_method of Array</title>
		</head>
		<body>
		    <p><input type="number" id="ageToCheck" value="18"></p>

		    <button onclick="myFunction()">Try it</button>

		    <p id="demo"></p>

		    <script>
		    const ages = [4, 12, 16, 20];

		    function checkAge(age) {
		      return age > document.getElementById("ageToCheck").value;
		    }

		    function myFunction() {
		      document.getElementById("demo").innerHTML = ages.find(checkAge);
		    }
		    </script>
		</body>
		</html>






