------------ Ruby -----------

https://www.tutorialspoint.com/ruby/ruby_syntax.htm



Ruby is like python and all other object oriented programing language but its truely object oriented programing language.

# Installation steps on terminal ---

	$ sudo apt install ruby-full

# To check version ---
	$ ruby -v


# To run ruby program via terminal ---
	$ ruby <filename>.rb

# Hello World program in ruby ---

puts ("Hello World")
print("Hello World")


# Sum of two numbers in ruby ---

a = 4
b = 6
c = a + b
puts "the sum of #{a} #{b} is #{c}" 

Notes --- Difference between in puts and print is just simple as in puts the cursur will start from next line and in print the cursure will be in same line on thime of execution.


# Ruby Begin stetements ---
 syntax -- 
	Begin {
		this begin block
		}
	#(Begin block is always execute first while start executing)

# Ruby End statement ---
 Syntax --
	End {
		this is end block
		}
	#(End Block is always execute after all execution done first)

# Commits in Ruby ---
	1) # for single line
	2) =begin
		 - - - -
		 - - - - 
	   =end  for multiple lines.


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

# Ruby is a perfect Object Oriented Programming Language. The features of the object-oriented programming language include −

	1) Data Encapsulation
	2) Data Abstraction
	3) Polymorphism
	4) Inheritance
	5) CLasses
	6) Objects


# CLasses in ruby ---- 
	A class is the blueprint from which individual objects are created.

	Syntax -- class <class_name>
			 - - - -
			 - - - -
			End


# Variable in Ruby class ---
	Types of variables --
	
	1) Local Variables − Local variables are the variables that are defined in a method. Local variables are not available outside the method. You will see more details about method in subsequent chapter. Local variables begin with a lowercase letter or _.
	eg -- number = 10
		or
		_Number = 10
	
	2) Instance Variables − Instance variables are available across methods for any particular instance or object. That means that instance variables change from object to object. Instance variables are preceded by the at sign (@) followed by the variable name.
	eg -- @no_of_veels = 5	

	3) Class Variables − Class variables are available across different objects. A class variable belongs to the class and is a characteristic of a class. They are preceded by the sign @@ and are followed by the variable name.
	Eg -- @@no_of_customers = 0
	
	4) Global Variables − Class variables are not available across classes. If you want to have a single variable, which is available across classes, you need to define a global variable. The global variables are always preceded by the dollar sign ($).
	eg -- $a_global_veriable = 100


# Local Variable ---
'''
Variable avilabe for local scope like if made in function then avilable in that
 function only or if made in loop then avilable in that loop only.
puts "Local Variable ---"
10.times do
    x = 10
    p x
    # p is short form of puts 
end
'''


# GLobal Variable ---
''' 
starts with $ sign.
Variable avilable anywhere eithe declare for that block or not.

puts "GLobal Variable ---"

10.times do
    $x = 10
end
p $x
'''

# Instance Variables ---

'''
starts with @ sign and then variable name.
when instance variable is a variable which is avilable to that
    instance variable will not avilable for any other method or cant be use
    in other method.
eg ---

@batiing_var = 300
p @batiing_var
'''

# Constant Variable ---

'''
Variable name Always be in capital letters like TEAM
In Ruby if we change data of constant variable then first it will show
warning and then for practice it will change/ update the data of constant.

EG ---

TEAM = "Angels"
p TEAM
TEAM = "Athelets"
p TEAM

'''

# Class Variables ---

'''
The variable avilable to the instance of the class only
eg --

class MyClass
    @@team = "Athletic"
    p @@team
end
'''




# Create a object of class using new method ---
	object is instance of the class.
	syntax = object_name = class_name.new
	object can be any.


# Methods in Ruby With example ---

	class Customer 
	    @@no_of_customer = 0
	    def initialize(id, name, addr)
	        @cust_id = id
	        @cust_name = name
	        @cust_address = addr
	        puts ("id : "+@cust_id+", name : "+@cust_name+", address : "+@cust_address)
	
	    end
	
	end
	
	cust1 = Customer.new("1","Preet","India")
	cust2 = Customer.new("2","Neha","India")


# Memeber Functions --- It is also called Methods means methods in class is called member funtion of class.
	class Customer
	    def hello()
	        puts "Hello World"
	    end
	end
	
	cust1 = Customer.new
	cust1.hello


# GLobal Variable in Ruby with example ---
 Variable avilable in every class with in or out side of class.

Example ---

	#Global Variable
	
	$global_var = 10
	class Customer
	    def print_global
	        puts("Global Variable in class 1 is #{$global_var}")
	    end
	end
	
	class Customer2
	    def print_global
	        puts("Global Variable in class 2 is #$global_var")
	    end
	end
	
	cust1 = Customer.new
	cust1.print_global
	cust2 = Customer2.new
	cust2.print_global


# Instance Variable WIth example ----

Variable is avilable in class for class only.

Example --

	class Customer
	    def initialize(id, name, addr)
	        @cust_id = id
	        @cust_name = name
	        @cust_address = addr
	    end
	    def details()
	        puts "Customer Id : #@cust_id"
	        puts "Customer Name :  #@cust_name"
	        puts "Customer Address :  #@cust_address"
	    end
	end
	
	cust1 = Customer.new("1","Preet","India")
	cust2 = Customer.new("2","Nitin","India")
	cust1.details()
	cust2.details


# Class Variable with Example ---

Variable avilable in class anywhere.

example --


	class Customer
	    @@no_of_customers = 0
	    def initialize(id, name, addr)
	            @cust_id = id
	            @cust_name = name
	            @cust_addr = addr
	    end
	    def details()
	            puts "Customer id : #@cust_id"
	            puts "Customer name : #@cust_name"
	            puts "Customer address : #@cust_addr"
	    end
	    def total_no_customers()
	            @@no_of_customers += 1
	            puts "Total No of Customers : #@@no_of_customers"
	    end
	end
	cust1 = Customer.new("1","Preet","India")
	cust2 = Customer.new("2","Nitin","India")
	cust3 = Customer.new("3","Aman","India")
	cust1.details()
	cust1.total_no_customers()
	cust2.details()
	cust2.total_no_customers()
	cust3.details()
	cust3.total_no_customers()



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Date 9/July/2021 ---


# Constant Variables ---

 An Constant variable is that variable which contains a constant value and will not change on run time where in other programing languages Constant variable can't change value of it in run time but in Ruby It can change values but parallay also show wornning that this variable is already intialized.

A contant variable always writen in capital letters.

These variable if defined in class then can be accessable within class only and if defined outside the class then work as global variable.

	Eg --- Class Example 
			VAR1 = 100
			Var2 = 200
			def show
				puts"Values of 1st constant variable is : #{VAR1}"
				puts"Values of 2nd constant variable is : #{VAR2}"
			end
		end
		object = Example.new()
		object.show


# Rseudo Variables in Ruby ---
 These variables are also called predefined variables which is look like local variable but behaves like Constant variables.
These variables are as follow ---

	1) Self --- Same as in python which recives object of current method.
	2) true --- it represents true.
	3) false -- it represents false.
	3) nil ---- Value represent undefined.
	4) _FILE_ - Name of current source file.
	5) _LINE_ - Current line no in the source file.


# Data types in Ruby ---

	1) Integer Numbers --
		As all integers in our number system like --
		1, 2, 3, ...   (All Positive Number)
			0      (ZERO)
		-1, -2, -3 ... (All Negetive Numbers)
		together are called integers 

	2) Float Numbers --
		All fractional Values is called float numbers --
		Eg --
			1.2, 345.76, 1234567890.87654, etc

	3) String Datatype -- 
		It is squence or series of charectors, if writen in double quotes then allow substitution and no need of \ backslash. But is writen in single quotes then for any inner single quote we need \ for nor error or can say to make ' as part of string.

	Eg -- puts 'hello world "\\"' (here double backslash is show single slash on run time)
		puts 'hello\'s world "\"' (here inner \ is to make inner single quote as part of string)
		puts "'hello world'" (if the string in double quotes then inner single quote will be part of string)
		puts "'hello's world'" (same as above)

	
	4) Arrays -- It is like collection of hetrogenious datatype.
		It is comma seprated series and inclosed in between square brackets.
		Trailing comma will ignored means if any extra comma will found with empty value after that then it will ignore.
		
		Eg -- arry = ["fred", 12, 34.7, "This is string", "last string",]
			arry.each do |i|
				puts i
			end

	5) Hashes means like dictionary in python ---
		It is collection of keys and values.
		it is also comma seprated and => sign in between key and value and inclosed in { } brackets.
		it is also folow trailing comma ignored feature.

		Eg -- hsh = color = {"red" => 0xf00, "green" => 0x0f0, "blue" => 0x00f,]
			hsh.each do |key, value|
				print key, " is ", value, "\n"
			end

	6) Range --- As range word presents an interval which is set of values with a start and end.
		Eg -- (10..15).each do |n|
				print n, ' '
			end

# Operators In Ruby ---
	Operators are the predefiend signs and keywords which perform some kind of operations with the help of operants.
	
	Types of operators ---
	1) Arithmetic Operators --
		(+, -, *, /, %, **)
	
	2)Comparision Operators ---
		(==, !=, >, <, <=, >= )
		Some more below --
		<=> : return 0 if equal, 1 if first is greater, -1 if second is greater.
		=== : returns test if any value is in given range or not.
		.edl? : work as comparing values but it compares types.
		equal? : return true if recieves same object id.

	3) Assignment Operators ---
		(=, +=, -=, *=, /=, %=, **=)

	4) Parallel Assignment --
		eg --
			a = 10  |    a, b, c = 10, 20, 30
			b = 20  |        OR
			c = 30  |    a, b = b, c
		
	5) Bit wise operators --
		$  : Perform AND or . product.
		|  : perform OR or x product.
		^  : Perform Xor operation.
		~  : Perform 1's compliment.
		<< : Left sift
		>> : Right sift

	6) Logical Operators --
	
		AND,
		OR,
		&& : same as AND
		|| : same as OR
		!  : NOT
		NOT
	
	7) Ternary Operator --
		
		(?:) : Check True or false
			Eg -- true ? then value X : otherwise value Y

	8) Range Operators --
		
		..  : In this end will included 
			like 1..10 means 1 to 10
		... : IN This end will be excluded
			like 1...10 means 1 to 9

	9) defined? Operator --
		It is use to check the Variable/ method was defined before or not.

	10) Dot "." and Double colon "::" --
		
		Dot is use to call methods which is call by any class name or object.
		Double colon is use to call methods as well but which is defined in class and it can be access anywhere outside the class.




# If-Else Statements ---

	Syntax -- 
		if condition [then]
			code ...
		elsif condition [then]
			code ...
		else
			code ...
		end
		
	Eg ---
		x = 1
		if x > 2
			puts "x is greater then 2"
		elsif x <= 2 and x != 0
			puts "x is 1"
		else
			puts "I can't guess the number"
		end


# Unless-else statement ---
	same as if else but reverse of if else. 
	Unless condition will check and if false then only unless block execute else the else block will execute.

	Syntax --
		unless conditional [then]
			code
		[else
			code ]
		end

	Eg -- 
		x = 1
		unless x >= 2
			puts "x is less then 2"
		else
			puts "x is equal to or greater then 2"
		end	


# IF modifier ---
	Syntax --
		code if condition
	Eg --
		$debug = 1
		print "debug\n" if $debug

# Unless Modifier ---
	Syntax --
		code unless condition
	Eg --
		$var = 1
		print"1 -- value is set\n" if $var
		print"2 -- value is set\n" unless $var
		$var = false
		print"3 -- value is set\n" unless $var


# Case Statement --
	Syntax -- Case Expression
		when expresion, ... [then]
			code
		when exp,....
			code
		else
			code
		end
	
	Eg ---
		$age = 5
		case $age
		when 0..2
		    puts "Baby"
		when 3..6
		    puts "little child"
		when 7..12
		    puts "child"
		when 13..18
		    puts "youth"
		else
		    puts "adult"
		end


# While loop ---
	Syntax -- while condition do
			code ...
		end

	Eg --
		$i = 1
		$num = 10
		while $i <= $num
		    puts "Inside the loop i = #$i"
		    $i += 1
		end

# While modifier ----
	Same as do while --
	Syntax --- code while condition
			
			OR

		begin
			code
		end while condition

	Eg --
		$i = 0
		$num = 5
		begin
		    puts "Inside the loop i : #$i"
		    $i += 1    
		end while $i <= $num 


# Until Statement --
	Same as while loop but reverse of while conditions
	Syntax -- until condition [do]
			code
		end

	Eg -- 
		$i = 0
		$num = 5
		until $i > $num do
		    puts "Inside the loop i : #$i"
		    $i += 1
		end


# Until modifier ---
	Syntax -- code untill condition
			OR
		begin
			code
		end until condition
	
	Eg --
		$i = 0
		$num = 5
		begin
		    puts "Inside the loop i : #$i"
		    $i += 1
		end until $i > $num


# For Loop Statements ---
	Syntax ---
		for variable[, variable,...] in expression [do]
			code
		end

	Eg ---
		for i in 0..5
		    puts "Value of local variable : #{i}"
		end

		#       OR

		(0..5).each do |i|
		    puts "Value of local variable : #{i}"
		end 


# Break statment ---
	It use to terminate the most internal block of either loop or method.
	Eg --




# Next Statment --- same as continue in python in which it can exit the curent iteration and not let go the complier to the nex instractions and send iterator to next value to iterate.

	Syntax -- With Example --
	for i in 0..5
	    if i < 2 then
	        next
	    end
	    puts "Value of local variable is #{i}"
	end



# Redo statment --- Use to send iterator to just previous value ans do perform task again and again.

	Syntax --- with exapmlpe ---
	# For loop with redo statement

	for i in 0..5
	    if i < 2 then
        	puts "value is #{i}"
        	redo

	    end

	end



# Methods ---- It is same as functions in other programing laguages.

	1) Simple Methods ---
		Syntax -- def metho_name()
				code
			end
		
		Eg ---
			
			def hello()
			    puts "Hello World"
			end
			hello()


	2) Parametrized Methods ---

		Syntax -- def metho_name(arg1, arg2, ...)
                                code
                        end

		Eg --

			def sum(a, b)
			    puts "Sum is #{a + b}"
			end
			sum(5, 10)

	3) Default Value parametrized method ---

		Syntax -- def metho_name(arg1, arg2, ...)
                                code
                        end

                Eg --

			def test(a = "Ruby", b = "Perl")
			    puts "1st is #{a}"
			    puts "2nd is #{b}"
			end

			test "C", "C++"
			test


# Return statment in method

	Syntax -- With Example --

		def test()
		    i = 100
		    j = 200
		    k = 300
		    return i, j, k
		end

		var = test
		puts var



# Array as argument in method ---

	Eg -- 
		def sample(*test)
		    puts "No. of arguments #{test.length}"
		    for i in 0...test.length
		        puts "The parameter are #{test[i]}"
		    end
		end
		sample "Zara", "6", "F"

		sample("Joe", "36", "M", "MCA")



# Yield statement with methods ---

	Eg --
		def test
		    puts "You are in method"
		    yield 
		    puts "You are in method again"
		    yield
		end
     
		test { puts "You are in the block" } 
	# Second Example ---

		def test
		    yield 5
		    puts "You are in the method test"
		    yield 100
		end
		test {|i| puts "You are in the block #{i}"}



# BEGIN and END Block ---
	BEGIN block always execute first.
	END block always execute at last in program.

	Eg --
		BEGIN { 
 
		   puts "BEGIN code block"
		} 

		END { 
 
		   puts "END code block"
		}

		puts "MAIN code block"




# Modules ---- Modules are a way to grouping together methods, classed and constants

	Syntax --- Modules module_name
			statment
		end

	Module can have all features like class have.
	
	Eg -- 1) Save with name trig.rb
		# Creating Module name Trig
		module Trig
		    PI = 3.141592654
		    def Trig.sin(x)
		        return x
		    end

		    def Trig.cos(x)
		        return x
		    end

		end
		
		2) save with name mortal.rb
		# Creating module named mortal
		module Mortal
		    VERY_BAD = 0
		    BAD = 1

		    def Mortal.sin(badness)
		        return badness
		    end
		end


# Require Statement ---

	Require statement is use to import module files in any third program

	Syntax -- require filename
	
	Eg --- Save another file with any name ---
	
		# Test Created modules
		$LOAD_PATH << '.'

		require 'trig.rb'
		require 'mortal'

		y = Trig.sin(Trig::PI/4)
		puts y

		wrongdoing = Mortal.sin(Mortal::VERY_BAD)
		puts wrongdoing

	NOTES --- There $LOAD_PATH << '.' aware ruby that module file must be searched in the current directory.





-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Date --- 12-July-2021

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-




# Include Statement ---
	Include Statements are use to embed a module in a class.

	Syntax -- include module_name

	Eg -- Save this module file with name support.rb
		
		module Week
		    FIRST_DAY = "Sunday"
		    def Week.weeks_in_month
		        puts "You have 4 weeks in a month"
		    end
		    def Week.weeks_in_year
		        puts "You have 52 weeks in a year"
		    end
		end

		#Second file to check or include module in class

		$LOAD_PATH << '.'

		require 'support.rb'

		class Decode
		    include Week
		    no_of_year = 10
		    def no_of_months
		        puts Week::FIRST_DAY
		        number = 10*12
		        puts number
		    end
		end

		d1 = Decode.new
		puts Week::FIRST_DAY
		Week.weeks_in_month
		Week.weeks_in_year
		d1.no_of_months



# Mixins in Ruby ---
	Mixins is a feature od ruby by which multiple inheritance possible in ruby.
	When a class can inherit features from more than one parent class, the class is supposed to show multiple inheritance.
	But in ruby multiple inheritance is not possible directly.
	So to perform multiple inheritance we can use modules.
	Modules have some use by which it can fullfill the need for multiple inheritance by providing a facility called a mixin.
	
	Eg ---
		Suppose we have 2 modules --
		module A
		    def a1
		        puts "Module A and method a1"
		    end
		    def a2
		        puts "Module A and method a2"
		    end

		end

		module B
		    def b1
		        puts "Module B and method b1"
		    end
		    def b2
		        puts "Module B and method b2"
		    end
		end
	
		
		# Now let make a class file to inhert feature of above modules ---

		$LOAD_PATH << '.'

		require 'mixin_test.rb'


		class Sample
		    include A
		    include B
		    def s1
		        puts "class Sample method s1"
		    end
		end

		samp = Sample.new
		samp.a1
		samp.a2
		samp.b1
		samp.b2
		samp.s1


		#By the above example we can say with the help of modules a class sample is able to perform multiple inheritance with module A & B.





-=-=-=-=-==-=-===-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Date --- 13-July-2021
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# String Object ---
	It is like arbitary sequence of one or more bytes, typically represents characters that repersents human language.

# Expression Substitution ---
	Means embedding the value of any Ruby expression into a string using #{}--
	Eg --
		x,y,z = 12,36,72
		puts"The value of x is #{x}"
		puts"The sum of x and y is #{x + y}"
		puts"The product of x,y and z is #{x*y*z}"

# String Built-in methods ---- In file Ruby_String_methods_and_practice.txt






# Array --- array is collection of hetrogenious datatype 
	Each element in an array is associated with and referred to by an index.
	


# Create Array ---
	1) By new class method --
		eg -- name = Array.new
	
	2) By Array[] method --
		eg -- num = Array.[](1,2,3,4,5)
			OR
		num = Array[1,2,3,4,5]

	3) By range method --
		eg -- digits = Array(0..9)


# By new class method ---
	In class method to make array we can pass size of array as well
	eg--
		num = Array.new(4)
	
	If we pass any value with size of array then it will become element of array and repeate as much the size of array.
	eg--
		name = Array.new(4, "Mac")

	We can define and initialize array with for loop or can say in comprehension way --
	eg -- 
 		nums = Array.new(10), {|e| e = e * 2}


# Array Built-in Methods ----- In the file Ruby_Array_Built-in_Methods_and_practice.txt







=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=
Date --- 14-July-21
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



# Hashes --- Just like dictionaries in python, Hashes is collection of key-value pairs like "Salary" => 5000
	It is similar to Array except that indexing is done via arbitary keys of any object type, not an integer index.



# Creating Hashes ---
	As with arrays, there is variety of ways to create hashes --
	
	1) Class method --	
		Eg -- Month = Hash.new

		Similarly we can give default value to hash.
		Eg -- month = Hash.new("month")
				OR
			month = Hash.new "month"


	2) Hash[] method --
		Eg --
			month = Hash["a" => 100, "b" => 200]


# Hash Built in methods ------ In file Ruby_Hash_Built-in_Methods.txt




=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=--=-=-=-=-=-=
Date ---  15-July-2021
=-=-=-=-=-=-=--=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



#Date and time ---

	Time class represents date and times.
	
# Getting current Date and time ---

	By class merthod ---
	
	time1 = Time.new
	puts "Current Time : "+ time1.inspect


Notes --
	Time.new help to create object of time class


# To print current time as above ---

	time2 = Time.now
	puts "Current time : "+ time2.inspect



# Componets of data and time ----

	time1 = Time.new

	#Components --

	puts "Current Time : " + time1.inspect

	puts time1.year # To show year from date
	puts time1.month # To show month from date
	puts time1.day # To show day of the date
	puts time1.wday # TO show day according week like sunday monday etc in integer
	puts time1.yday # To show day according in year
	puts time1.hour # To show hour of time
	puts time1.min  # To show minute of time
	puts time1.sec  # To show seconds of time
	puts time1.usec # To show nanoseconds of time
	puts time1.zone # To show zone of time.



=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=--=-==-
Date -- 16-July-2021
=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=--=-==-



# Range --- 
	Range occurs everywhere : Jan to Dec, 0 to 9, line 50 through 67 and so on.
	Range can be use in various ways in Ruby --
	1) Range as Sequence
	2) Range as Condition
	3) Range as intervals



# Range as Sequence ---

	The most natural use of ranges is to express a sequence. 
	As sequence have a start point an end point and a way to produce succesive value in the sequence.

	Ruby creates these sequences using the ".." and "..." range operators.
	Double dot is for inclusive range and tripal dot is for exclusive range.

	Eg --- 	(1..5)     => 1,2,3,4,5
		(1...5)    => 1,2,3,4
		('a'..'b') => 'a','b','c','d'

	Eg --
		#Range as sequence
		range1 = (1..5).to_a
		range2 = ('a'..'d').to_a
		range3 = ('bar'..'baz').to_a
		puts "#{range1}"
		puts "#{range2}"
		puts "#{range3}"

	#Check some Ruby built-in methods with range---

		# Check built-in methods with range

		digits  = 0..9
		puts digits.include?(9)

		ret = digits.min
		puts "Min value is #{ret}"

		ret = digits.max
		puts "Max value is #{ret}"

		ret = digits.reject{|i| i < 5}
		puts "Reject values are :  #{ret}"

		digits.each do |digit|
		    puts "In Loop #{digit}"
		end



# Ranges as Conditions ---

	Ranges may also be used as conditional expressions.

	# Range as condition 
	
	while gets
	    print if /start/../end/
	end
	

	## Similar --- Use with case statements ---

	score = 73

	result = case score
	    when 0..40 then "Fail"
	    when 41..60 then "Pass"
	    when 61..70 then "Pass with Merit"
	    when 71..100 then "Pass with Distinction"
	    else "Invalid Score"
	    end

	    puts result 


# Range as interval ---
	Range as Intervsl is like some value falls with in the interval represented by the range. 
	This is done using ===, then case equality operator.

	Eg ---
		# Range as Interval

		if ((1..10) === 5)
		    puts "5 lies in (1..10)"
		end

		if (('a'..'j' === 'c'))
		    puts "c lies in (a..j)"
		end

		if (('a'..'j') === 'z')
		    puts "'z' lies in (a..j)"
		else puts "False"
		end

# Iterators ----

	We have two iterators in ruby --
	1) Each
	2) Collect


1) Each ---
	eg--
		#Iterators

		ary = [1,2,3,4,5]
		ary.each do |i|
		    p i
		end



2) Collect ---
	eg --
		a = [1,2,3,4,5]
		b = Array.new
		b = a.collect
		puts b


		# Similarly --

		a = [1,2,3,4,5]
		b = a.collect {|x| 10*x}
		puts b




# File I/O ---

	Ruby provides a whole set of I/O-related methods implemented in the Kernel module. 
	All the I/O methods are derived from the class IO.

	Basic Methods of I/O class --
	1) Read
	2) Write
	3) Gets
	4) Puts
	5) Readline
	6) Getc
	7) printf



# The Puts statements ---
	Puts statements is use to display the valaue store in the variable.
	Eg ---
		# Puts Statemets ---

		val1 = "This is variable one"
		val2 = "This is variable two"
		puts val1
		puts val2 

# The Gets Statements ---
	Gets statements is use to take any input from user from standard Screen called STDIN. 
	And the inputs will stored in a variable and then we can print it on STDOUT.
	Eg --
		# Gets Statement
		puts "Enter Input here : "
		val1 = gets
		puts val1


# The Putc Statment  ---
	this statement is use to display one charector at a time on STDOUT.
	Eg -- Str = "Hello World"
		putc str


# The Print Statement ---

	The print statement is use to display the output like puts 
	But the puts use to go on next line after display its value 
	where print is use to be on same line after display their value.
	
	Eg -- str1 = "Hello World"
		print str1+"\n"
		print"Buenos Dias\n"


# Opening And Closing Files In Ruby ----

	As till now we have been reading and writing to the standard input and output. 
	Now, we will see how to play with actual data files.

# Create file class object using File.new method ---

	Syntax -- afile = File.new("filename", "mode")
			# process the file
		afile.close


# The File.open method ---
	The same methods that we've been using for 'simple' I/O are available for all file objects. 
	So, gets reads a line from standard input, and aFile.gets reads a line from the file object aFile.

	Syntax -- File.open("filename", "mode") do |afile|
			# Process the file.
		end




# Modes to open files in Ruby ---

1) r -- Read-only mode. 
	The file pointer is placed at the beginning of the file. This is the default mode.


2) r+ -- Read-write mode. 
	The file pointer will be at the beginning of the file.


3) w -- Write-only mode. 
	Overwrites the file if the file exists. 
	If the file does not exist, creates a new file for writing.


4) w+ -- Read-write mode. 
	Overwrites the existing file if the file exists. 
	If the file does not exist, creates a new file for reading and writing.


5) a -- Write-only mode. 
	The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. 
	If the file does not exist, it creates a new file for writing.


6) a+ -- Read and write mode. 
	The file pointer is at the end of the file if the file exists. 
	The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.




#  The Sysread Method -- (Read mode "r")
	It is use to open file in sysread mode.
	Eg --
		#Open_FIle_in_Sysread_mode
		afile = File.new("test.txt", "r")
		if afile
		    content = afile.sysread(20)
		    puts content
		else
		    puts"Unable to open file"
		end



# The syswrite method --- (Write mode "r+")
	It is use to open file into sys write or read + mode.

	Eg --
		afile = File.new("test.txt", "r+")
		if afile
		    afile.syswrite("ABCDEFG")
		else
		    puts"Unable to open file"
		end



# The Each_byte method --- 
	It will help to iterate each charectors from file one by one ---
	
	Eg ---
		#Open_File_write_and_each_byte_method.rb
		afile  = File.new("test.txt", "r+")
		if afile
		    afile.syswrite("ABCDEFG")
		    afile.each_byte {|ch| putc ch; putc ?.}
		else
		    puts "Unable to open file!"
		end
	
# The IO.readline Method ---
	The class File is a subclass of the class IO. The class IO also has some methods, which can be used to manipulate files
	One of the IO class methods is IO.readlines. This method returns the contents of the file line by line. 

	Eg ---
		#Open_file_with_IO_Readline_Method.rb
		arr = IO.readlines("test.txt")
		puts arr[0]
		puts arr[1]



# The IO.foreach Method ---
	This method also returns output line by line. 
	The difference between the method foreach and the method readlines is that the method foreach is associated with a block
	However, unlike the method readlines, the method foreach does not return an array.

	Eg --- 
		#Open_file_with_IO_foreach_method.rb
		IO.foreach("test.txt") {|i| puts i}


# Rename and delete method ---
	It will rename and delete file programmatically
	
	Eg -- To Rename --
		File.rename("test.txt", "input.txt")

	Eg -- To delete --
		File.delete("test2.txt")



# File modes ad ownership ---
	Use the chmod method with a mask to change the mode or permission/access list of file.
	
	Eg -- file = File.new("test.txt","w")
		file.chmod(0755)


# Mask for chmode method --

	1)	0700	rwx mask for owner


	2)	0400	r for owner


	3)	0200	w for owner


	4)	0100	x for owner


	5)	0070	rwx mask for group


	6)	0040	r for group


	7)	0020	w for group


	8)	0010	x for group


	9)	0007	rwx mask for other


	10)	0004	r for other


	11)	0002	w for other


	12)	0001	x for other


	13)	4000	Set user ID on execution


	14)	2000	Set group ID on execution


	15)	1000	Save swapped text, even after use



# File Inquiries
	
	The following command tests whether a file exists before opening it −

		File.open("file.rb") if File::exists?( "file.rb" )


	The following command inquire whether the file is really a file −

		File.file?( "text.txt" ) 

	
	The following command finds out if the given file name is a directory −
		Eg -- for directory ---
			File::directory?( "/usr/local/bin" ) # => true

		Eg -- For file ---
			File::directory?( "file.rb" ) # => false


	The following command finds whether the file is readable, writable or executable −

		File.readable?( "test.txt" )   # => true
		File.writable?( "test.txt" )   # => true
		File.executable?( "test.txt" ) # => false


	The following command finds whether the file has zero size or not 

		File.zero?( "test.txt" )      # => true


	The following command returns size of the file −

		File.size?( "text.txt" )     # => 1002


	The following command can be used to find out a type of file −


		File::ftype( "test.txt" )     # => file


	The following command can be used to find when a file was created, modified, or last accessed −


		File::ctime( "test.txt" ) # => Fri May 09 10:06:37 -0700 2008
		File::mtime( "text.txt" ) # => Fri May 09 10:44:44 -0700 2008
		File::atime( "text.txt" ) # => Fri May 09 10:45:01 -0700 2008




# Navigating Through Directories
	

	1) To change directory to /usr/bin.

		#Dir.chdir("/usr/bin")


	2) You can find out what the current directory is with Dir.pwd −

		puts Dir.pwd # This will return something like /usr/bin


	3) You can get a list of the files and directories within a specific directory using Dir.entries −

		puts Dir.entries("/usr/bin").join(' ')


	4) Returns an array with all the entries within the specified directory. Dir.foreach provides the same feature −

		Dir.foreach("/usr/bin") do |entry|
		   puts entry
		end
	

	5) An even more concise way of getting directory listings is by using Dir's class array method −

		Dir["/usr/bin/*"]



# Create a Directory ---
	Eg-- Dir.mkdir("mynewdir")

	We also change permissions ---
	
	Eg -- Dir.mkdir("mynewdir", 755)


# Delete a directory ---

	Eg -- Dir.delete("testdir")






# Exception Handling ---


	Exceptions are used to handle various type of errors, which may occur during a program execution and take appropriate action instead of halting program completely.
	We enclose the code that could raise an exception in a begin/end block and use rescue clauses to tell Ruby the types of exceptions we want to handle.

	Syntax ---
		begin  
		# -  
		rescue OneTypeOfException  
		# -  
		rescue AnotherTypeOfException  
		# -  
		else  
		# Other exceptions
		ensure
		# Always will be executed
		end

	Everything from begin to rescue is protected. If an exception occurs during the execution of this block of code, control is passed to the block between rescue and end.


	Eg ---
		# Check file can open and not and handle error by exception handling ---
		begin
		    file = open("/unexistant_file")
		    if file
	        	puts "File opend successfully"
		    end

		rescue
		    file = STDIN
		end
		print file," == ",STDIN,"\n"



# Using retry statement ---

	You can capture an exception using rescue block and then use retry statement to execute begin block from the beginning.
	Example ---
		#Exception_handling_using_retry.rb
		begin
		    file = open("/unexistant_file")
		    if file
		        puts "File opend successfully"
		    end

		rescue
		    fname = "test.txt"
		    retry
		end



# Using Raise Statement --
	Raise statements use to raise an exception.
	
	Eg --- 1

		#Exception_handling_using_raise_statement.rb

		begin
		    puts 'I am before the raise'
		    raise 'An error has occured'
		    puts 'I am after the raise'
		rescue 
		    puts 'I am rescude'
    
		end
		puts "I am after the begins block"


	Eg --- 2

		begin
		    raise 'A test Exception'
		rescue Exception => e
		    puts e.message
		    puts e.backtrace.inspect
		end



# Using Ensure Statements ---
	Ensure clause is use to ensure that some part of block should be done either exception reised or not.

	Eg --
		#Exception_Handling_using_ensure_statement.rb
		begin
		    raise 'A test Exception'
		rescue Exception => e
		    puts e.message
		    puts e.backtrace.inspect
    
		ensure
		    puts 'Ensuring Exception'
		end



# Using else Statement ---
	Else clause will executed only if exception is not raised.

	Eg -- 
		#Exception_Handling_using_else_statement.rb
		begin
		    #raise 'A test Exception'
		    puts 'I am not raised exception'
		rescue Exception => e
		    puts e.message
		    puts e.backtrace.inspect

		else
		    puts "Congratulation -- no error"    

		ensure
		    puts 'Ensuring Exception'
		end


# Catch and Throw ---

	The catch defines a block that is labeled with the given name (which may be a Symbol or a String). The block is executed normally until a throw is encountered.
	
	Eg --
		#Exception_handling_using_catch_throw.rb
		def promptAndGet(prompt)
		    print prompt
		    res = readline.chomp
		    throw :quitRequested if res == "!"
		    return res
		end
 
		catch :quitRequested do
		    name = promptAndGet("Name: ")
		    age = promptAndGet("Age: ")
		    sex = promptAndGet("Sex: ")
		end
		promptAndGet("Name:")


# Class Exception ---

	Class Exception contains the sub exception classes in hierarchy structure.
	These next level contains seven types--

	1) Interupt
	2) No Memory Error
	3) Signal Exception
	4) Script Error
	5) Standard Error
	6) System Exit





=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Date --- 20-July-21
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



# CSV File Handling Using Ruby ---

	Ruby have csv library to read and write csv files.


# Ruby CSV parsing ---


# To read file directly ---
	Eg -- 
		# CSV File handling -- Reading CSV file directly
		require 'csv'
		afile = CSV.read("test_food.csv")
		puts afile




# To read as parse a string with CSV data ---
	Eg --
		# CSV File handling -- parse method ro parse the string with csv data--

		require 'csv'
		res = CSV.parse ("1, Chocolate\n2, Banana\n3, Apple")
		puts res


# CSV Options ---
	Eg --
		#CSV Options -- Table
		require 'csv'
		table = CSV.parse(File.read("test_food.csv"), headers: true)

		puts table
		puts table.class
		puts table[1]['id']
		puts table.length
		for i in 0...table.length
		    puts table[i]['id']+" : "+table[i]['name']

		end


	Notes -- CSV::Table is a two-dimensional data structure for representing CSV documents. 
		Tables allow you to work with the data by row or column, manipulate the data, 
		and even convert the results back to CSV.




# From a table two ways/ modes to iterate ---

	1) by_row --- (default)
	2) by_col --- 
	
	eg -- By_col---

		require 'csv'
		table = CSV.parse(File.read("test_food.csv"), headers: true)

		print table.by_col[0]
		print "\n"
		print table.by_col[1],"\n"


# To Convert column as array of string into numeric ---

	#Using CSV coneverters

	Eg --
		require 'csv'

		print CSV.parse("1,2,3,4,5")    #[["1", "2", "3", "4", "5"]]

		print "\n"

		print CSV.parse("1,2,3,4,5", converters: :numeric)    #[[1, 2, 3, 4, 5]]

		print "\n"



# Here we have following converters ---
	
	1) Integer
	2) Float
	3) Numeric (Float + Integer)
	4) Date
	5) DateTime
	6) All
	7) Symbol

	

# How to create New CSV file ---

	We can make csv file data by following methods --
	
	1) Map Method --
		Eg --
			cats = [[:blue, 1],[:white, 2],[:black, 3]]

			cats.map!{|c| c.join(",")}.join("\n")

			File.write("cats.csv", cats)

	2) Genrate Method --
		Eg --
			require 'csv'

			CSV.open("cats.csv", "w") do |csv|
			    csv << [:black, 1]
			    csv << [:white, 2]
			    csv << [:black_and_white, 3]
			end

















