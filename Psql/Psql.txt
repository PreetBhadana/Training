Psql or PostgreSQL

-----------------------------------------------------------------------------------------------------------

Install PostgreSQL in Linux ---

$ lsb_release -a (this command to check what version we have in our system)

https://gorails.com/setup/ubuntu/18.04#database
follow this link to check the Setting Up PostgreSQL


$ sudo apt install postgresql-11 libpq-dev



===========================================================================================================

# To start postgresql ---

$ sudo -i -u postgres
$ psql

OR

$ sudo su postgres
$ psql

OR

$ sudo -u postgres psql


# To exit postgres prompt ---

$ \q

OR

$ exit


#To create user ---

$ sudo -u postgres createuser --interactive


#To create database directly via terminal --- 

$sudo -u postgres createdb <database_name>


#To check conection information like port number, host etc ---

$sudo -u postgres psql
	# \conninfo


# To login as new user in postgres ---

$sudo -u <username> psql


-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

https://www.tutorialspoint.com/postgresql/postgresql_create_database.htm

AND

https://www.youtube.com/watch?v=qw--VYLpxG4

for Learning Postgresql
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

Database -- Database is a collection of Tables

Table -- Table is collection of records/ Rows

Record -- Record is collection of columns and attributes

SQL stands for Structure Quesy Language

SQL commands are use to interact with relational database

# These commands are three type : ---

1) DDL -- Stands for Data Defination Language
2) DML -- Stands for Data Manipulation Language
3) DCL -- Stands for Data Control Language


## DDL Commands --
	1) CREATE -- Create a new table, a view of a table or other project in the database
	2) ALTER -- Modifies a existing database object such as table
	3) DROP -- Delete an entire table, a view of a table or other object in the database


## DML Commands --
	1) SELECT -- Retrives certain recods from one or more table
	2) INSERT -- Create a record
	3) UPDATE -- Modifies Record
	4) Delete -- Delete Records

## DCL Commands --
	1) GRANT -- Give a privilege to user
	2) REVOKE -- Takes back privilege granted from user


# Constraints --

1) Not Null -- Ensure that a column can't have a null value
2) Default -- Provide a default value for a column when name i specified
3) Unique -- Ensure the all value in a column are different
4) Primary key -- Uniquely identifies each row/ record in a database table
5) Foreign key -- Uniquely identifies a row / record in any other database table
6) Check -- It ensure that all values in a column sertify and retrives data from
7) Index -- Used to create and retrives data from the database very quickly.


# Create Database in postgres ---

Syntax -- CREATE DATABASE datbase_name;

if want to make db via terminal directly then-
$ createdb [option][dbname[description]]

*) dbname -- The name of databse to create
*) description -- Specifies a comment to be associated with the newly created database
*) option -- Command line arguments, which createdb accepts.


# To see list of databases ---
	# \l (backslash "\" el "l")


# To select/ use database ---
	# \c <database_name> (backslash "\" )


# To delete database using Drop command ---
	Syntax -- DROP DATABASE [IF EXIST] name
	*) IF EXIST -- Do not throw an error if the database does not exist. A notice is issued in this case. 	
	*) name -- The name of database to remove
	
	Example -- # Drop Database employee

# To Create Table ---

	Syntax -- CREATE TABLE Table_name (
			column1 datatype,
			column2 datatype,
			columnn datatype
			);

	Example -- 
		1) CREATE TABLE Employee(
			ID INT PRIMARY KEY NOT NULL,
			NAME TEXT NOT NULL,
			AGE INT NOT NULL,
			ADDRESS CHAR(50),
			SALARY REAL
			);
		
		2) CREATE TABLE Department(
			ID INT PRIMARY KEY NOT NULL,
			DEPT CHAR(50) NOT NULL,
			EMP_ID INT NOT NULL
			);


# To check the list of tables ---
	# \d


# To describe the table ---
	# \d <table name>


# To delete table using drop command ---
	syntax -- DROP TABLE Table_Name;
	
	example --
	1) For single table ---
		# Drop table employes;
	
	2) For multiple tables at a time ---
		# Drop table employes, department;


# Schema ---
	A schema is a named collection of tables. A schema can also contain views, indexes, sequences, data types, operators, and functions. Schemas are analogous to directories at the operating system level, except that schemas cannot be nested. PostgreSQL statement CREATE SCHEMA creates a schema.


# To create schema ---
	syntax -- Create schema <schema_name>;
	#  create schema myschema;


# Create table in schema ---
	syntax -- create table <schema_name>.<table_name>(
				. . . .
				);
	Example -- create table myschema.company(
			ID   INT              NOT NULL,
			NAME VARCHAR (20)     NOT NULL,
			AGE  INT              NOT NULL,
			ADDRESS  CHAR (25),
			SALARY   DECIMAL (18, 2),
			PRIMARY KEY (ID)
			);

# To see table ---
	#select * from myschema.comapny;


# To delete schema ---
	# Drop schema myschema; (if empty)
	# Drop schema myschema CASCADE; (If any object in schema)

# Advantages of using a Schema ---
	1) It allows many users to use one database without interfering with each other.

	2) It organizes database objects into logical groups to make them more manageable.

	3) Third-party applications can be put into separate schemas so they do not collide with the names of other objects.

	

================================================================================================================================Date -- 30/June/2021
================================================================================================================================


#Insert Comand ---

The PostgreSQL INSERT INTO statement allows one to insert new rows into a table. One can insert a single row at a time or several rows as a result of a query.

Syntax -- INSERT INTO <table_name> (column1, column2, ..., columnN) VALUES(value1, value2, ..., valueN);

By the above syntax we can insert values with corresponding columns_name.
If we are sure about columns sequence then can directly give values rather giving column name along.

Syntax -- INSERT INTO <table_name> VALUES(value1, value2, value3, ..., valueN);

Example -- # create table company(
		Id int Primary key not null,
		Name text not null,
		Age int not null,
		Address char(50),
		Salary real,
		Join_date date
		);

	# INSERT INTO comapany (id, name, age, address, salary, join_date) VALUES(1, 'Preet Bhadana', 24, 'India', 15000.00, '2021-06-22');
	# insert into company (id, name, age, address, salary, join_date) values(2, 'Dhravesh Sharma', 22, 'India', 15000.00, '2021-06-01');
	# insert into company (id, name, age, address, salary, join_date) values(3, 'Aayush Josi', 23, 'India', 15000.00, '2021-06-01');


# Select Command ---
	Select command is useto show/ fetch tha data from database table which is result data as result table.
	These result tables are called result-sets.
	
	Syntax -- # SELECT column1, column2, ..., columnN FROM table_name;
	
	To fetch all data in form of table we also can use
	Syntax -- # SELECT * FROM table_name;

	Example -- 
	# Select * from company;
	# Select id, name, Salary from company;


# Operators ---

An operator is a reserved word or a character used primarily in a PostgreSQL statement's WHERE clause to perform operation(s), such as comparisons and arithmetic operations.

Operators type are listed bellow --

1) Airthmetic Operators --
	(+, -, *, /, %, ^(Power), |/ (Root), ||/ (Cube Root), !, !! (same as ! but just work as prefix))

2) Comparison Operator --
	(=, !=, <> (check equal or not and give true when not), >, <, >=, <=)

3) Logic Operators -- 
	(AND - to allow Multiple condition)
	(NOT - Like NOT EXISTS, NOT BETWEEN, NOT IN etc)
	(OR - allow either of the conditions)

4) Bit String Operators --
	(& - AND Operator)
	(| - Or operator)
	(~ - 1's comlement)
	(<< - left sift)
	(>> - Right sift)
	(# - xor operator)


#WHERE Clause and Expressions ---
Expression means combination of one or more values, operators and functions that evaluate to a value.

Syntax -- Select col1, col2, ..., colN from table_name where [condition | Expression];

Types of Expressions --

1) Boolen Expression --
	Example -- Select * from company where salary = 10000;

2) Numerical Expression --
	Eg -- Select (15 +6 ) as addition;
	      Select count(*) as total from company;
	      Select count(*) as total_15000_owner from company where salary = 15000;
	      Select count(*) as Record from company where salary == 25000;

3) Data Expression --
	Eg -- Select Current_timestamp;


where clause can not only use with SELECT, it also can use with DELETE, UPDATE statements as well.


# Some more exaples of where clause with expressions ---

Example --1)  Show all records where age is greater or equal to 25 AND salary greater or equal to 25000
	# Select * from company where age >= 25 AND salary >= 25000;

	  2) Show all records where age is greater or equal to 25 OR Salary is greater or equal to 25000
	# Select * from company where age >= 25 OR salary >= 25000;


# IS Clause with where clause ---
	# select * from company where age IS NOT NULL;


#Like Clause with where clause ---
	# select * from company where name like '%Sharma';
	# select * from company where name like 'P%';


#In Operator ---	
	# select * from company where age in (25,27);


# Not In Operator ---
	# Select * from company where age NOT IN (25,27):


# Beetween Operator --
	Work with AND Operator--
	# Select * from company where age between 25 AND 27;

# Sub Queries --- Means nested Queries ---
Example --
	all the records with AGE field having SALARY > 65000 and later WHERE clause is being used along with EXISTS operator to list down all the records where AGE from the outside query exists in the result returned by sub-query −

	# Select age from company where exists(select age from company where salary > 25000);


# AND Operator --
	This operator is use when check whitin multiple conditions.
	Syntax -- Select * from table_name where [condi1] AND [condi2].. AND [condN];
	Eg -- Select * from company where Age >= 25 AND Salary >= 25000;

# OR Operator --
	This Operator is use when any either condition will check from multiple conditions.
	Eg -- Select * from company where Age >= 25 OR salary >= 25000;


#Update Query ---
	Use to update in existing record of a table. 
	WHERE clause also can use with update in a shorted records otherwise update will happend in all records.
	Syntax -- update table_name set col1 = val1, col2 = val2, .., colN = valN where [condition];

	Eg --
	1) Update salary of those whoes customer id is 3.
	# update company set salary = 18000 where id = 3;

	2) Update address of those whoes salary is 20000.
	#update company set address = 'Texas' where salary = 20000;


# DELETE Query ---
	DELETE Query is used to delete the existing records from a table. 
	You can use WHERE clause with DELETE query to delete the selected rows. Otherwise, all the records would be deleted.
	Syntax -- Delete from table_name where [condition];

	Eg -- Delete the recod of those whoes id is 2.
	# delete from company where id = 2;


# Like Clause ---
	This operator is use to match text values against a pattern using wildcards.
	There are two wildcard type use with like operator --
	1) The percentage sign (%)
	2) The underscore (_)
	
	1) % sign will also use multiple types --
	
		syntax -- select * from table_name where column like 'XXXX%';
		Eg - select * from company where name like 'P%';

		Syntax -- select * from table_name where col like '%XXX%';
		Eg - select * from company where name like '%et%';

		Syntax -- select * from table_name where col like 'XXXX%';
		Eg - select * from company where name like '%Sharma';
	
	2) _ underscore will use in many type --

		Syntax -- select * from table_name where name like '_____t';
		this means whose name is of 5 charector ends with t.
		
		Syntax -- select * from table_name where name like '__r__';
		
		Syntax -- select * from table_name where salary like '2_%_%';


# Limit Clause ---
	Use to limit add amount returned by the select statement.
	Syntax -- Select * from table_name limit [no of rows];
	
	Eg -- TO show the top 5
	# Select * from company limit 5;

# Limit clause with OFFSET Clause ---
	Offset help to give start value --
	Syntax -- select * from table_name limit 5 offset 2;


# Order by Clause ---
	Is use to sort the data in ascending order or descending order, based on one or more columns.

	Syntax -- Select col-list from table_name [where condition] [order by cal1, col2, col3, ..., colN] [ASC | DESC];

	Eg - Select * from company order by age ASC;
	Eg - Select * from company order by Age, Salary ASC;
	Eg - Sekect * from company order by Name DESC;

# Group by clause ---
	Is use to group identical records to remove redundancy and/ compute aggretes that apply to these group.
	GROUP BY use with in SELECT statement and also use WHERE clause condition priorly and precedes ORDER BY clause.

	Syntax -- Select  col-list from table_name where [condition] group by col1, col2,..colN order by col1, col2, colN;

	Eg - Show total amount of salary of each identical customers.  
	# Select name, sum(salary) from company Group by name;

	Eg - Show total amount of salary of each identical customers name with in ascending order.
	# Select name sum(salary) from company group by name order by name;


# With Clause ---
	It help to write auxilary statement for use in a larger query.
	It basically help to make larger and complicated queries into simple form to make easy to read.
	These statements are reffer as Comman Table Expression or CTE.

	Example -- With CTE AS(
			Select * from company)
			Select * from CTE;
 
 
	Eg -- With Recursive t(n) as(
			Values(0)
			Union all
			Select salary from company where salary < 20000
			)
		Select sum(n) from t;

	Eg -- With moves_rows As(
			Delete From company2
			where salary >= 25000
			returning *
		Insert into company3(select * from moved_rows);
		
		In this func returning * is to hold all deleted values as in form of table & then handover to Insert command.


# Having Clause ---
	The HAVING clause allows us to pick out particular rows where the function's result meets some condition.
	The WHERE clause places conditions on the selected columns, whereas the HAVING clause places conditions on groups created by the GROUP BY clause.

	Syntax -- 
	Select col1, col2 from table1, table2 where [conditions] Group by col1, col2 Having [condition] order by col1,col2;

	Eg -- Show records from which the name count is less then 2
	# Select name from company where Group by name Having count(name) < 2;


# Distinct Keyword ---
	Distinct keyword just help to remove duplicacy and show unique records in result.
	Syntax -- Select Distinct col1, col2, ..., colN from table_name where [condition];

	Example -- There is multiple entries of repeated data so we need to fetch only unique names from table.
	# Select distinct name from company;



================================================================================

Date  ---  1/July/21

================================================================================


# Constraints ----

	Constraints are the rule enforced on data columns on table to prevent from insert invalid data in database.

Types of Constraints ---

1) NOT NULL Constraints ---
	As some time some columns in any row contain null value & if you don't want null values then use NOT NULL constraint use in table structure over any column.
NUll value is not same as no data, rather it represent unknown data.
	
	Syntax --- Create table company 
			( 
			Id INT PRIMARY KEY NOT NULL,
			Name text NOT NULL,
			Age INT NOT NULL,
			Address char(50),
			Salary real Default 50000.00
			);



2) PRIMARY KEY ---
This key in a table is use to uniquely identify each row/ Record in a database table. Primary key column can't have null value except im sqlite.
	Sybtax -- Create table company
			( 
                        Id INT PRIMARY KEY NOT NULL,
                        Name text NOT NULL,
                        Age INT NOT NULL,
                        Address char(50),
                        Salary real Default 50000.00
                        );
3) Foreign Constraint ---
 A foreign key constraint specifies that the valuse in a columns must match the values appearing is some row of another table.
This comman value of two deffrent table create a relation between two tables.

	Sybtax -- Company table--- 
		Create table company
                        (
                        Id INT PRIMARY KEY NOT NULL,
                        Name text NOT NULL,
                        Age INT NOT NULL,
                        Address char(50),
                        Salary real Default 50000.00
                        ); 

		Department table ---
		Create table company
                        (
                        Id INT PRIMARY KEY NOT NULL,
                        DEPT char(50) NOT NULL,
                        Emp_id INT references company (id)
                        );

4) Check constraint ---
The CHECK Constraint enables a condition to check the value being entered into a record. If the condition evaluates to false, the record violates the constraint and is not entered into the table.

EG -- Create table company
                        (
                        Id INT PRIMARY KEY NOT NULL,
                        Name text NOT NULL,
                        Age INT NOT NULL,
                        Address char(50),
                        Salary real check (salary > 0)
                        );

5) Exclusion Constraints ----
Ensure that if any two rows are compared on the specified contains or expression using the specified operations at least one of those operator comparisons will return False or null.
Syntax -- Create table company
                        (
                        Id INT PRIMARY KEY NOT NULL,
                        Name text NOT NULL,
                        Age INT NOT NULL,
                        Address char(50),
                        Salary real Default
			EXCLUDE USING gist
			(Name with =, Age with <>)
                        );

6) Dropping constraints ---
	To remove a constraints you need to know its name first then only it will eary to drop it. Else need to find out system genrated name.
Like \d command is used to get this information.

Syntax -- ALTER TABLE table_name DROP CONSTRAINT some_name;


		
# Join clause ----
 Join clause is use to join records from two ore more tables together in a database.

Types of joins ---

1) Cross Join ---
2) Inner Join ---
3) Left Outer Join ---
4) Right Outer Join ---
5) Full Outer Join ---


1) Cross Join --- I this join match every row of table1 with every row of the table2.
		  Cross join have potential to make extreme large table.
		  If there is x and y columns then total resulted rows is x + y.

	Syntax -- select .. from table1 cross join table2

	Eg - select emp_id, name, dept from company cross join department;


2) Inner Join --- In inner join create a new result table by combining column values of two tables based upon the join predicat
		The query compares each row of table1 with each row of table2 to find all pairs of rows, which satisfy the join-predicate.
		When the join-predicate is satisfied, column values for each matched pair of rows of table1 and table2 are combined into a result row.

	Syntax -- select .. from table1 inner join table2 on table1.common_filed = table2.common_filed

	Eg - select emp_id, name, dept from company inner join department on company.id = department.emp_id;


3) Left outer join --- In case of LEFT OUTER JOIN, an inner join is performed first. Then, for each row in table T1 that does not satisfy the join condition with any row in table T2, a joined row is added with null values in columns of T2. Thus, the joined table always has at least one row for each row in T1.
	
	Syntax -- select .. from table1 left outer join table2 on table1.common_filed = table2.common_filed

        Eg - select emp_id, name, dept from company left outer join department on company.id = department.emp_id;
 

4) Right Outer join --- First, an inner join is performed. Then, for each row in table T2 that does not satisfy the join condition with any row in table T1, a joined row is added with null values in columns of T1. This is the converse of a left join; the result table will always have a row for each row in T2.

	Syntax -- select .. from table1 right outer join table2 on table1.common_filed = table2.common_filed

        Eg - select emp_id, name, dept from company right outer join department on company.id = department.emp_id;

5) Full outer join --- First, an inner join is performed. Then, for each row in table T1 that does not satisfy the join condition with any row in table T2, a joined row is added with null values in columns of T2. In addition, for each row of T2 that does not satisfy the join condition with any row in T1, a joined row with null values in the columns of T1 is added.

        Syntax -- select .. from table1 full outer join table2 on table1.common_filed = table2.common_filed

        Eg - select emp_id, name, dept from company full outer join department on company.id = department.emp_id;


# UNION Clause --- Show Combined result of two or more select statements and remove duplicacy from result.
		To use UNION, each SELECT must have the same number of columns selected, the same number of column expressions,
		the same data type, and have them in the same order but they do not have to be the same length.

	Example -- select emp_id, name, dept from company left outer join department on company.id = department.emp_id
			Union
		   select emp_id, name, dept from company right outer join department on company.id = department.emp_id;


# UNION ALL Clause --- Same as UNION Clause but just include duplicate result of two select statments only.

	Example -- select emp_id, name, dept from company left outer join department on company.id = department.emp_id
                        Union
                   select emp_id, name, dept from company inner join department on company.id = department.emp_id;

# Trigger ---
Trigger is like function which fire automaticaly itself after or before any other main function call like UPDATE, INSERT, DELETE etc.

	Syntax -- create trigger trigger_name_tgr [BEFORE | AFTER | INSTED of] [INSER | DELETE | UPDATE] on table_name
			[
				... Trigger logic goes here ...
			]

# Alter Table COmmand ---
 One of the most ussing command in sql as after creating table, to modify the structure and update like add delete in structure of table and constraints alter table command will use.

--> To add new column ---
	Syntax -- alter table table_name add col_name datatype;

--> To drop a column ---
	Syntax -- alter table table_name drop column col_name;

--> To Change datatype of a column ---
	Syntax -- Alter Table table_name Alter Column col_name Type datatype;

--> To ADd not null constraint in a column ---
	Syntax -- Alter Table table_name Modify col_name datatype NOT NULL;

--> To add Unique constraint on the column --
	Syntax -- Alter Table table_name Add Constraint MyUniqueConstraint Unique (col1, col2, ..);

--> To Add check Constraint ---
	Syntax -- Alter Table table_name Add Constraint MyUniqueConstraint Check (condition);

--> To Add Primary Key ---
	Syntax -- Alter Table table_name Add COnstraint MyPrimaryKey Primary Key (Col1, col2, ...);

--> To Drop Constraint ---
	Syntax -- Alter Table table_name Drop Constraint MyUniqueConstrint;

--> TO Drop Primary Constraint ---
	Syntax -- Alter Table table_name Drop COnstraint MyPrimaryKey;


# Truncate Table ---
	Command is used to delete complete data from an existing table. You can also use DROP TABLE command to delete complete table but it would remove complete table structure from the database and you would need to re-create this table once again if you wish to store some data.

	Syntax -- TRUNCATE TABLE  table_name;

# Transaction ---
A transaction is a unit of work that is performed against a database.
Transaction like creating a record, updating a record, or deleting a record from the table, then you are performing transaction on the table.
Transection have 4 standard properties---

	1) Atomicity -- Ensures that all operations within the work unit are completed successfully; otherwise, the transaction is aborted at the point of failure and previous operations are rolled back to their former state.

	2) Consistency -- Ensures that the database properly changes states upon a successfully committed transaction.

	3) Isolation -- Enables transactions to operate independently of and transparent to each other.

	4) Durability -- Ensures that the result or effect of a committed transaction persists in case of a system failure.


# Begin Command --- To start transection persist untill next commit or roleback command is encountered.

# Commit COmmand --- IS like to save after done a transection successfully.

# Roleback Comand --- IS like to do undo the changes or if no any transection done successfully.



# Sub Query ---
 Like nested queries or Inner queries ---
	Example -- show result of those those id is shorted by inner condition which is like all those employees those have salay > 45000.00
	# Select * from comapny where id in (select id from company where salary > 45000);


# Sub Query with the Insert command --
 It is like insert data in a table via any sub query or can say inner select query.
	Eg -- Insert into company_bkp select * from company where id in (select id from company);

# Sub query with update command ---
	Eg -- Update tabel company_bkp in salary by 0.50 for all customers whose age is greater than or equal to 27
	# Update compan_bkp set salary = salary +salary*0.5 where id in (select age from company where age >=27);

# DELETE data via sub query ---
	EG -- delete recods of those customers whose age is greater than 27.
	# delete from company_bkp where age in (select age from company where agr > 27);


# Auto Increment ---
	It is like constraint which help to give sequence with auto increment according to inserting records.
	Syntax -- create table employee(
			id serial primary key,
			name text not null,
			age int not null,
			address char(50),
			salary real
			);



