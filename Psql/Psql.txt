Psql or PostgreSQL

-----------------------------------------------------------------------------------------------------------

Install PostgreSQL in Linux ---

$ lsb_release -a (this command to check what version we have in our system)

https://gorails.com/setup/ubuntu/18.04#database
follow this link to check the Setting Up PostgreSQL


$ sudo apt install postgresql-11 libpq-dev



===========================================================================================================

# To start postgresql ---

$ sudo -i -u postgres
$ psql

OR

$ sudo su postgres
$ psql

OR

$ sudo -u postgres psql


# To exit postgres prompt ---

$ \q

OR

$ exit


#To create user ---

$ sudo -u postgres createuser --interactive


#To create database directly via terminal --- 

$sudo -u postgres createdb <database_name>


#To check conection information like port number, host etc ---

$sudo -u postgres psql
	# \conninfo


# To login as new user in postgres ---

$sudo -u <username> psql


-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

https://www.tutorialspoint.com/postgresql/postgresql_create_database.htm

AND

https://www.youtube.com/watch?v=qw--VYLpxG4

for Learning Postgresql
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

Database -- Database is a collection of Tables

Table -- Table is collection of records/ Rows

Record -- Record is collection of columns and attributes

SQL stands for Structure Quesy Language

SQL commands are use to interact with relational database

# These commands are three type : ---

1) DDL -- Stands for Data Defination Language
2) DML -- Stands for Data Manipulation Language
3) DCL -- Stands for Data Control Language


## DDL Commands --
	1) CREATE -- Create a new table, a view of a table or other project in the database
	2) ALTER -- Modifies a existing database object such as table
	3) DROP -- Delete an entire table, a view of a table or other object in the database


## DML Commands --
	1) SELECT -- Retrives certain recods from one or more table
	2) INSERT -- Create a record
	3) UPDATE -- Modifies Record
	4) Delete -- Delete Records

## DCL Commands --
	1) GRANT -- Give a privilege to user
	2) REVOKE -- Takes back privilege granted from user


# Constraints --

1) Not Null -- Ensure that a column can't have a null value
2) Default -- Provide a default value for a column when name i specified
3) Unique -- Ensure the all value in a column are different
4) Primary key -- Uniquely identifies each row/ record in a database table
5) Foreign key -- Uniquely identifies a row / record in any other database table
6) Check -- It ensure that all values in a column sertify and retrives data from
7) Index -- Used to create and retrives data from the database very quickly.


# Create Database in postgres ---

Syntax -- CREATE DATABASE datbase_name;

if want to make db via terminal directly then-
$ createdb [option][dbname[description]]

*) dbname -- The name of databse to create
*) description -- Specifies a comment to be associated with the newly created database
*) option -- Command line arguments, which createdb accepts.


# To see list of databases ---
	# \l (backslash "\" el "l")


# To select/ use database ---
	# \c <database_name> (backslash "\" )


# To delete database using Drop command ---
	Syntax -- DROP DATABASE [IF EXIST] name
	*) IF EXIST -- Do not throw an error if the database does not exist. A notice is issued in this case. 	
	*) name -- The name of database to remove
	
	Example -- # Drop Database employee

# To Create Table ---

	Syntax -- CREATE TABLE Table_name (
			column1 datatype,
			column2 datatype,
			columnn datatype
			);

	Example -- 
		1) CREATE TABLE Employee(
			ID INT PRIMARY KEY NOT NULL,
			NAME TEXT NOT NULL,
			AGE INT NOT NULL,
			ADDRESS CHAR(50),
			SALARY REAL
			);
		
		2) CREATE TABLE Department(
			ID INT PRIMARY KEY NOT NULL,
			DEPT CHAR(50) NOT NULL,
			EMP_ID INT NOT NULL
			);


# To check the list of tables ---
	# \d


# To describe the table ---
	# \d <table name>


# To delete table using drop command ---
	syntax -- DROP TABLE Table_Name;
	
	example --
	1) For single table ---
		# Drop table employes;
	
	2) For multiple tables at a time ---
		# Drop table employes, department;


# Schema ---
	A schema is a named collection of tables. A schema can also contain views, indexes, sequences, data types, operators, and functions. Schemas are analogous to directories at the operating system level, except that schemas cannot be nested. PostgreSQL statement CREATE SCHEMA creates a schema.


# To create schema ---
	syntax -- Create schema <schema_name>;
	#  create schema myschema;


# Create table in schema ---
	syntax -- create table <schema_name>.<table_name>(
				. . . .
				);
	Example -- create table myschema.company(
			ID   INT              NOT NULL,
			NAME VARCHAR (20)     NOT NULL,
			AGE  INT              NOT NULL,
			ADDRESS  CHAR (25),
			SALARY   DECIMAL (18, 2),
			PRIMARY KEY (ID)
			);

# To see table ---
	#select * from myschema.comapny;


# To delete schema ---
	# Drop schema myschema; (if empty)
	# Drop schema myschema CASCADE; (If any object in schema)

# Advantages of using a Schema ---
	1) It allows many users to use one database without interfering with each other.

	2) It organizes database objects into logical groups to make them more manageable.

	3) Third-party applications can be put into separate schemas so they do not collide with the names of other objects.

	

================================================================================================================================Date -- 30/June/2021
================================================================================================================================


#Insert Comand ---

The PostgreSQL INSERT INTO statement allows one to insert new rows into a table. One can insert a single row at a time or several rows as a result of a query.

Syntax -- INSERT INTO <table_name> (column1, column2, ..., columnN) VALUES(value1, value2, ..., valueN);

By the above syntax we can insert values with corresponding columns_name.
If we are sure about columns sequence then can directly give values rather giving column name along.

Syntax -- INSERT INTO <table_name> VALUES(value1, value2, value3, ..., valueN);

Example -- # create table company(
		Id int Primary key not null,
		Name text not null,
		Age int not null,
		Address char(50),
		Salary real,
		Join_date date
		);

	# INSERT INTO comapany (id, name, age, address, salary, join_date) VALUES(1, 'Preet Bhadana', 24, 'India', 15000.00, '2021-06-22');
	# insert into company (id, name, age, address, salary, join_date) values(2, 'Dhravesh Sharma', 22, 'India', 15000.00, '2021-06-01');
	# insert into company (id, name, age, address, salary, join_date) values(3, 'Aayush Josi', 23, 'India', 15000.00, '2021-06-01');


# Select Command ---
	Select command is useto show/ fetch tha data from database table which is result data as result table.
	These result tables are called result-sets.
	
	Syntax -- # SELECT column1, column2, ..., columnN FROM table_name;
	
	To fetch all data in form of table we also can use
	Syntax -- # SELECT * FROM table_name;

	Example -- 
	# Select * from company;
	# Select id, name, Salary from company;


# Operators ---

An operator is a reserved word or a character used primarily in a PostgreSQL statement's WHERE clause to perform operation(s), such as comparisons and arithmetic operations.

Operators type are listed bellow --

1) Airthmetic Operators --
	(+, -, *, /, %, ^(Power), |/ (Root), ||/ (Cube Root), !, !! (same as ! but just work as prefix))

2) Comparison Operator --
	(=, !=, <> (check equal or not and give true when not), >, <, >=, <=)

3) Logic Operators -- 
	(AND - to allow Multiple condition)
	(NOT - Like NOT EXISTS, NOT BETWEEN, NOT IN etc)
	(OR - allow either of the conditions)

4) Bit String Operators --
	(& - AND Operator)
	(| - Or operator)
	(~ - 1's comlement)
	(<< - left sift)
	(>> - Right sift)
	(# - xor operator)


#WHERE Clause and Expressions ---
Expression means combination of one or more values, operators and functions that evaluate to a value.

Syntax -- Select col1, col2, ..., colN from table_name where [condition | Expression];

Types of Expressions --

1) Boolen Expression --
	Example -- Select * from company where salary = 10000;

2) Numerical Expression --
	Eg -- Select (15 +6 ) as addition;
	      Select count(*) as total from company;
	      Select count(*) as total_15000_owner from company where salary = 15000;
	      Select count(*) as Record from company where salary == 25000;

3) Data Expression --
	Eg -- Select Current_timestamp;


where clause can not only use with SELECT, it also can use with DELETE, UPDATE statements as well.


# Some more exaples of where clause with expressions ---

Example --1)  Show all records where age is greater or equal to 25 AND salary greater or equal to 25000
	# Select * from company where age >= 25 AND salary >= 25000;

	  2) Show all records where age is greater or equal to 25 OR Salary is greater or equal to 25000
	# Select * from company where age >= 25 OR salary >= 25000;


# IS Clause with where clause ---
	# select * from company where age IS NOT NULL;


#Like Clause with where clause ---
	# select * from company where name like '%Sharma';
	# select * from company where name like 'P%';


#In Operator ---	
	# select * from company where age in (25,27);


# Not In Operator ---
	# Select * from company where age NOT IN (25,27):


# Beetween Operator --
	Work with AND Operator--
	# Select * from company where age between 25 AND 27;

# Sub Queries --- Means nested Queries ---
Example --
	all the records with AGE field having SALARY > 65000 and later WHERE clause is being used along with EXISTS operator to list down all the records where AGE from the outside query exists in the result returned by sub-query −

	# Select age from company where exists(select age from company where salary > 25000);


# AND Operator --
	This operator is use when check whitin multiple conditions.
	Syntax -- Select * from table_name where [condi1] AND [condi2].. AND [condN];
	Eg -- Select * from company where Age >= 25 AND Salary >= 25000;

# OR Operator --
	This Operator is use when any either condition will check from multiple conditions.
	Eg -- Select * from company where Age >= 25 OR salary >= 25000;


#Update Query ---
	Use to update in existing record of a table. 
	WHERE clause also can use with update in a shorted records otherwise update will happend in all records.
	Syntax -- update table_name set col1 = val1, col2 = val2, .., colN = valN where [condition];

	Eg --
	1) Update salary of those whoes customer id is 3.
	# update company set salary = 18000 where id = 3;

	2) Update address of those whoes salary is 20000.
	#update company set address = 'Texas' where salary = 20000;


# DELETE Query ---
	DELETE Query is used to delete the existing records from a table. 
	You can use WHERE clause with DELETE query to delete the selected rows. Otherwise, all the records would be deleted.
	Syntax -- Delete from table_name where [condition];

	Eg -- Delete the recod of those whoes id is 2.
	# delete from company where id = 2;


# Like Clause ---
	This operator is use to match text values against a pattern using wildcards.
	There are two wildcard type use with like operator --
	1) The percentage sign (%)
	2) The underscore (_)
	
	1) % sign will also use multiple types --
	
		syntax -- select * from table_name where column like 'XXXX%';
		Eg - select * from company where name like 'P%';

		Syntax -- select * from table_name where col like '%XXX%';
		Eg - select * from company where name like '%et%';

		Syntax -- select * from table_name where col like 'XXXX%';
		Eg - select * from company where name like '%Sharma';
	
	2) _ underscore will use in many type --

		Syntax -- select * from table_name where name like '_____t';
		this means whose name is of 5 charector ends with t.
		
		Syntax -- select * from table_name where name like '__r__';
		
		Syntax -- select * from table_name where salary like '2_%_%';


# Limit Clause ---
	Use to limit add amount returned by the select statement.
	Syntax -- Select * from table_name limit [no of rows];
	
	Eg -- TO show the top 5
	# Select * from company limit 5;

# Limit clause with OFFSET Clause ---
	Offset help to give start value --
	Syntax -- select * from table_name limit 5 offset 2;


# Order by Clause ---
	Is use to sort the data in ascending order or descending order, based on one or more columns.

	Syntax -- Select col-list from table_name [where condition] [order by cal1, col2, col3, ..., colN] [ASC | DESC];

	Eg - Select * from company order by age ASC;
	Eg - Select * from company order by Age, Salary ASC;
	Eg - Sekect * from company order by Name DESC;

# Group by clause ---
	Is use to group identical records to remove redundancy and/ compute aggretes that apply to these group.
	GROUP BY use with in SELECT statement and also use WHERE clause condition priorly and precedes ORDER BY clause.

	Syntax -- Select  col-list from table_name where [condition] group by col1, col2,..colN order by col1, col2, colN;

	Eg - Show total amount of salary of each identical customers.  
	# Select name, sum(salary) from company Group by name;

	Eg - Show total amount of salary of each identical customers name with in ascending order.
	# Select name sum(salary) from company group by name order by name;


# With Clause ---
	It help to write auxilary statement for use in a larger query.
	It basically help to make larger and complicated queries into simple form to make easy to read.
	These statements are reffer as Comman Table Expression or CTE.

	Example -- With CTE AS(
			Select * from company)
			Select * from CTE;
 
 
	Eg -- With Recursive t(n) as(
			Values(0)
			Union all
			Select salary from company where salary < 20000
			)
		Select sum(n) from t;

	Eg -- With moves_rows As(
			Delete From company2
			where salary >= 25000
			returning *
		Insert into company3(select * from moved_rows);
		
		In this func returning * is to hold all deleted values as in form of table & then handover to Insert command.


# Having Clause ---
	The HAVING clause allows us to pick out particular rows where the function's result meets some condition.
	The WHERE clause places conditions on the selected columns, whereas the HAVING clause places conditions on groups created by the GROUP BY clause.

	Syntax -- 
	Select col1, col2 from table1, table2 where [conditions] Group by col1, col2 Having [condition] order by col1,col2;

	Eg -- Show records from which the name count is less then 2
	# Select name from company where Group by name Having count(name) < 2;


# Distinct Keyword ---
	Distinct keyword just help to remove duplicacy and show unique records in result.
	Syntax -- Select Distinct col1, col2, ..., colN from table_name where [condition];

	Example -- There is multiple entries of repeated data so we need to fetch only unique names from table.
	# Select distinct name from company;







